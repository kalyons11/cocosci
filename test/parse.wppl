var options = {
    method: 'MCMC',
    burn: 10,
    lag: 100,
    verbose: true,
}

var data = csv.read('../theLeagueMinutes.csv')
var columns = data[0]


var processData = function(data, columns) {

    var result = []

    mapN(function(index) {
        if (index == 0)
            return // Ignore column names
        
        // Condition on current player stats
        var current = _.zipObject(columns, data[index])

        result.push(current)

        // At end of game, conditon on win/loss
        // TODO - TEAM MODEL
    }, data.length - 1)

    return result
}

var dataProcessed = processData(data, columns)

var makeModel = function(p) {
    return function() {

        // Latent
        var skill = mem(function(player) {
            return sample(Exponential({a: 1}))
        })

        var agression = mem(function(player) {
            return sample(Gaussian({mu: 0.5, sigma: 0.2}))
        })

        var iq = mem(function(player) {
            return sample(Exponential({a: 1.5}))
        })

        // Weights
        var skill_points = function() { return sample(Gaussian({mu: 10, sigma: 5})) }
        var skill_assists = function() { return sample(Gaussian({mu: 5, sigma: 5})) }
        var agression_points = function() { return sample(Gaussian({mu: 10, sigma: 5})) }
        var iq_assists = function() { return sample(Gaussian({mu: 10, sigma: 5})) }


        // Observed
        var points = mem(function(player) {
            return Gaussian({
                mu: skill_points() * skill(player) + agression_points() * agression(player),
                sigma: 5
            })
        })

        var assists = mem(function(player) {
            return Gaussian({
                mu: skill_assists() * skill(player) + iq_assists() * iq(player),
                sigma: 3,
            })
        })

        // Data
        mapN(function(i) {
            var dict = dataProcessed[i]

            var pts = dict['playPTS']
            observe(points(dict['playDispNm']), pts)

            var ast = dict['playAST']
            observe(assists(dict['playDispNm']), ast)

            // At end of game, conditon on win/loss
            // TODO - TEAM MODEL
        }, dataProcessed.length)

        // Return distributions
        return {
            skill: skill(p),
            agression: agression(p),
            iq: iq(p),
            skill_points: skill_points(),
            skill_assists: skill_assists(),
            agression_points: agression_points(),
            iq_assists: iq_assists(),
        }
    }
}

var run = function(player) {
    var model = makeModel(player)

    var posterior = Infer(options, model)

    viz.marginals(posterior)

    display(player)

    map(function(key) {
        var dist = marginalize(posterior, key)
        display(key)
        display(expectation(dist))
    }, [
        'skill',
        'agression',
        'iq',
        'skill_points',
        'skill_assists',
        'agression_points',
        'iq_assists',
    ])
}

// NAME = 'Aron Baynes'
run('Lebron James')
// run('Elfrid Payton')

